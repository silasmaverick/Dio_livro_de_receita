databases, schemas e objetos

cada database é separado um do outro compartilhando apenas usuarios/roles e configuracoes do cluster postgresql

schemas
é um grupo de objetos, como tabelas, types, views, funções, entre outros.

objetos: sao tabelas, views, funcoes, types, sequences, entre outros pertencentes ao schemas

Database comandos
foto

alter database name rename to new_name

DROP DATABASE [nome]

schema
CREATE SCHEMA schema_name []
ALTER SCHEMA name RENAME TO new_name
drop schema [nome]

Melhores práticas
CREATE SCHEMA IF NOT EXISTS schema_name [] 
DROP SCHEMA IF EXISTS [nome]

------------------------------------
as colunas são consideradas como "campos da tabela" como atributos da tabela

tipos de dados:
numeric types
character types
data/time types
boolean type

orm - programas que cria as tabelas
-----------------------------------
DML e DDL
Data Manipulation Language
Linguagem de manipulação de dados
insert, update, delete, select

DDL:
Data Definition language
CREATE, ALTER, DROP

update sempre precisa de condiçãp
UPDATE + WHERE

DELETE + WHERE 

SELECT campos da tabela FROM nome da tabela WHERE + condicoes

---------------------------------------------
Funções Agregadas POSTGRES
AVG
COUNT (opção HAVING)
MAX
MIN
SUM

---------------------------------------------
RELACIONAMENTO entre tabelas

JOINS
- JOIN ou INNER JOIN
SELECT tabela_1.campos, tabela_2.campos
FROM tabela_1
JOIN tabela_2
	ON tabela_2.campo=tabela_1.campo

* É uma melhor prática usar FK com PK ou índices para melhor desempenho da query

- LEFT JOIN
SELECT tabela_1.campos, tabela_2.campos
FROM tabela_1
LEFT JOIN tabela_2
	ON tabela_2.campo=tabela_1.campo

os campos que houver relacionamento ele tras, senão tras nulo.


- RIGHT JOIN
SELECT tabela_1.campos, tabela_2.campos
FROM tabela_1
RIGHT JOIN tabela_2
	ON tabela_2.campo=tabela_1.campo

os campos que houver relacionamento ele tras, senão tras nulo.

- FULL JOIN
SELECT tabela_1.campos, tabela_2.campos
FROM tabela_1
FULL JOIN tabela_2
	ON tabela_2.campo=tabela_1.campo
*tras todas as relações possíveis

- CROSS JOIN
	Todos os dados de uma tabela serão cruzados com todos os dados da tabela referenciada no CROSS JOIN criando uma matriz

SELECT tabela_1.campos, tabela_2.campos
FROM tabela_1
CROSS JOIN tabela_2
	
-----------------------------------------------------
CTEs

commom table expression

Forma auxiliar de organizar "statements", ou seja, bloco de códigos, para consultas muito grandes, gerando tabelas temporárias e criando relacionamento entre elas.

Dentro dos statements podem ter selects, inserts, updates ou deletes

with statements

With [nome1] as (
SELECT (campos)
from tabela_a
where
),
[nome2] as (
SELECT (campos,)
from tabela_b
where
)
select nome1.campos
from nome1 
join nome2

etc...

------------------------------------------------
views -
são camadas para as tabelas, são "alias" para uma ou mais queries

aceitam comandos de select, insert, update e delete

caso tenha join, nas tabelas, não é possivel os comandos acima. 

view temporary
CREATE OR REPLACE TEMPORARY VIEW vw_banco AS (SELECT numero, nome, ativo) FROM banco);

view recursive
CREATE or REPLACE RECURSIVE view (nomedaview)(camposdaview) as 
select base
union all
select campos
from tabela_base
join (nome_da_view);



numa view recursiva é obrigatório a existência dos campos da VIEW
union all 

-------------------------------------
TRANSACOES
Definicao - conceito fundamental de todos os sistemas de banco de dados.
conceito de múltiplas etapas/códigos reunidos em apenas 1 transação, onde o resultado precisa ser tudo ou nada

BEGIN;
	UPDATE conta SET valor = valor - 100.00
	where nome = 'Alice';

	UPDATE conta SET valor = valor + 100
	where nome = 'Bob';

COMMIT;

se acontecer algum erro no meio da transação é feito um rollback 

savepoint_ my savepoint; - lugar onde se acontecer um erro é retornado para lá

rollback to my_savepoint;

-------------------------------------------
Funções

Definição:
conjunto de códigos que são executados dentro de uma transação com a finalidade de facilitar a programação e obter o reaproveitamento/reutilizacao de códigos

Esistem 4 tipos de funções:
	- query language function (funcoes escritas em sql)
	- procedural language functions (funcoes estritas em pl/psql ou plpy)
	- internal function
	- c-language function
porém o foco aqui é falar sobre user defined functions.
funcoes que podem ser criadas pelo usuário

create or replace function (nome da funcao)
mesmo nome
mesmo tipo de retorno 
mesmo numero de parametros/argumento

returms
tipo de retorno (data type)
integer
char/varchar
boolean
row
table
json

security
invoker - executar as permissoes com as permissoes do usuario
definer - usuario que está executando a funcao pode executar a funcao com a funcao do criador da funcao

comportamento
	- immutable - ambos não permitem códigos que podem alterar o banco de dados, evitar selects
	- stable : não pode alterar o banco de dados, aceita select

seguranca e boas práticas
	called on null input
	- se qualquer um dos parametros  for null a funcao será executada
	return null on null input
	se qualquer um dos parâmetros/argumnentos fo null, a funcao será nullo

recursos
	- custos/row em unidades de cpu
	- rows - numero estimado de linhas que será analisadda pelo planner

sql function = nao é possivel utilizar transações










